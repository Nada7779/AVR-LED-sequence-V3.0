
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001403  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000950  00000000  00000000  00001e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c77  00000000  00000000  0000277b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  000036d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2b  00000000  00000000  00003d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  8a:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t mode    = 1;

void APP_init(void)
{
	// LEDs init
	LED_init(led_1_port, led_1_pin);
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_init>
	LED_init(led_2_port, led_2_pin);
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_init>
	LED_init(led_3_port, led_3_pin);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_init>
	LED_init(led_4_port, led_4_pin);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LED_init>
	// button init
	Button_init(BUTTON_1_PORT, BUTTON_1_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	83 e4       	ldi	r24, 0x43	; 67
  b6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Button_init>
	Button_init(BUTTON_2_PORT, BUTTON_2_PIN);
  ba:	67 e0       	ldi	r22, 0x07	; 7
  bc:	84 e4       	ldi	r24, 0x44	; 68
  be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Button_init>
	// Enable global interrupts
	Global_interrupt_enable ();
  c2:	0e 94 3c 03 	call	0x678	; 0x678 <Global_interrupt_enable>
	// Choose the external interrupt 0 sense - sense in rising edge
	External_interrupt0_mode (rising_edge);
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 42 03 	call	0x684	; 0x684 <External_interrupt0_mode>
	// Enable External interrupt 0 - INT0
	Exit_enable0 ();
  cc:	0e 94 3e 03 	call	0x67c	; 0x67c <Exit_enable0>
	// Choose the external interrupt 1 sense - sense in rising edge
	External_interrupt1_mode (rising_edge);
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 4c 03 	call	0x698	; 0x698 <External_interrupt1_mode>
	// Enable External interrupt 1 - INT1
	Exit_enable1 ();
  d6:	0e 94 48 03 	call	0x690	; 0x690 <Exit_enable1>
  da:	08 95       	ret

000000dc <__vector_1>:
		
	}
}

ISR (EXT_INT_0)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	
	if (sequence < Number_of_sequence)
  e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ec:	88 30       	cpi	r24, 0x08	; 8
  ee:	20 f4       	brcc	.+8      	; 0xf8 <__vector_1+0x1c>
	{
		sequence++;
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  f6:	03 c0       	rjmp	.+6      	; 0xfe <__vector_1+0x22>
	}
	else
	{
		sequence = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
}
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_2>:
ISR (EXT_INT_1)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
	
	if (mode < Number_of_modes)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	85 30       	cpi	r24, 0x05	; 5
 11c:	20 f4       	brcc	.+8      	; 0x126 <__vector_2+0x1c>
	{
		mode++;
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_2+0x22>
	}
	else
	{
		mode = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <BLINK_1_mode>:

void BLINK_1_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 138:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	20 f4       	brcc	.+8      	; 0x14a <BLINK_1_mode+0x12>
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 14a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14e:	82 50       	subi	r24, 0x02	; 2
 150:	84 30       	cpi	r24, 0x04	; 4
 152:	20 f4       	brcc	.+8      	; 0x15c <BLINK_1_mode+0x24>
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 15c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 160:	83 50       	subi	r24, 0x03	; 3
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	20 f4       	brcc	.+8      	; 0x16e <BLINK_1_mode+0x36>
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 16e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 172:	84 50       	subi	r24, 0x04	; 4
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	20 f4       	brcc	.+8      	; 0x180 <BLINK_1_mode+0x48>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	delay_ms(100);
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
	LED_off(led_1_port,led_1_pin);
 186:	64 e0       	ldi	r22, 0x04	; 4
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_2_port,led_2_pin);
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_3_port,led_3_pin);
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_4_port,led_4_pin);
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	delay_ms(900);
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
 1ac:	08 95       	ret

000001ae <BLINK_2_mode>:
}
void BLINK_2_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 1ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	20 f4       	brcc	.+8      	; 0x1c0 <BLINK_2_mode+0x12>
 1b8:	64 e0       	ldi	r22, 0x04	; 4
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 1c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1c4:	82 50       	subi	r24, 0x02	; 2
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <BLINK_2_mode+0x24>
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 1d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1d6:	83 50       	subi	r24, 0x03	; 3
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	20 f4       	brcc	.+8      	; 0x1e4 <BLINK_2_mode+0x36>
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 1e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1e8:	84 50       	subi	r24, 0x04	; 4
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <BLINK_2_mode+0x48>
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	delay_ms(200);
 1f6:	88 ec       	ldi	r24, 0xC8	; 200
 1f8:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
	LED_off(led_1_port,led_1_pin);
 1fc:	64 e0       	ldi	r22, 0x04	; 4
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_2_port,led_2_pin);
 204:	63 e0       	ldi	r22, 0x03	; 3
 206:	81 e4       	ldi	r24, 0x41	; 65
 208:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_3_port,led_3_pin);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_4_port,led_4_pin);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	delay_ms(800);
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
 222:	08 95       	ret

00000224 <BLINK_3_mode>:
}
void BLINK_3_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 224:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	84 30       	cpi	r24, 0x04	; 4
 22c:	20 f4       	brcc	.+8      	; 0x236 <BLINK_3_mode+0x12>
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 236:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 23a:	82 50       	subi	r24, 0x02	; 2
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	20 f4       	brcc	.+8      	; 0x248 <BLINK_3_mode+0x24>
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 248:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 24c:	83 50       	subi	r24, 0x03	; 3
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	20 f4       	brcc	.+8      	; 0x25a <BLINK_3_mode+0x36>
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 25a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 25e:	84 50       	subi	r24, 0x04	; 4
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	20 f4       	brcc	.+8      	; 0x26c <BLINK_3_mode+0x48>
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	delay_ms(300);
 26c:	8c e2       	ldi	r24, 0x2C	; 44
 26e:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
	LED_off(led_1_port,led_1_pin);
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_2_port,led_2_pin);
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_3_port,led_3_pin);
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	81 e4       	ldi	r24, 0x41	; 65
 286:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_4_port,led_4_pin);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	delay_ms(700);
 292:	8c eb       	ldi	r24, 0xBC	; 188
 294:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
 298:	08 95       	ret

0000029a <BLINK_4_mode>:
}
void BLINK_4_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 29a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	84 30       	cpi	r24, 0x04	; 4
 2a2:	20 f4       	brcc	.+8      	; 0x2ac <BLINK_4_mode+0x12>
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 2ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2b0:	82 50       	subi	r24, 0x02	; 2
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	20 f4       	brcc	.+8      	; 0x2be <BLINK_4_mode+0x24>
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 2be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2c2:	83 50       	subi	r24, 0x03	; 3
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	20 f4       	brcc	.+8      	; 0x2d0 <BLINK_4_mode+0x36>
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2d4:	84 50       	subi	r24, 0x04	; 4
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	20 f4       	brcc	.+8      	; 0x2e2 <BLINK_4_mode+0x48>
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	delay_ms(500);
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
	LED_off(led_1_port,led_1_pin);
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_2_port,led_2_pin);
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_3_port,led_3_pin);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_4_port,led_4_pin);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	delay_ms(500);
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
 30e:	08 95       	ret

00000310 <BLINK_5_mode>:
}
void BLINK_5_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 310:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 314:	81 50       	subi	r24, 0x01	; 1
 316:	84 30       	cpi	r24, 0x04	; 4
 318:	20 f4       	brcc	.+8      	; 0x322 <BLINK_5_mode+0x12>
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 322:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 326:	82 50       	subi	r24, 0x02	; 2
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	20 f4       	brcc	.+8      	; 0x334 <BLINK_5_mode+0x24>
 32c:	63 e0       	ldi	r22, 0x03	; 3
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 338:	83 50       	subi	r24, 0x03	; 3
 33a:	84 30       	cpi	r24, 0x04	; 4
 33c:	20 f4       	brcc	.+8      	; 0x346 <BLINK_5_mode+0x36>
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	81 e4       	ldi	r24, 0x41	; 65
 342:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 346:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 34a:	84 50       	subi	r24, 0x04	; 4
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	20 f4       	brcc	.+8      	; 0x358 <BLINK_5_mode+0x48>
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	81 e4       	ldi	r24, 0x41	; 65
 354:	0e 94 ef 01 	call	0x3de	; 0x3de <LED_on>
	delay_ms(800);
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
	LED_off(led_1_port,led_1_pin);
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	81 e4       	ldi	r24, 0x41	; 65
 362:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_2_port,led_2_pin);
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	81 e4       	ldi	r24, 0x41	; 65
 36a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_3_port,led_3_pin);
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	81 e4       	ldi	r24, 0x41	; 65
 372:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	LED_off(led_4_port,led_4_pin);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e4       	ldi	r24, 0x41	; 65
 37a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_off>
	delay_ms(200);
 37e:	88 ec       	ldi	r24, 0xC8	; 200
 380:	0e 94 83 03 	call	0x706	; 0x706 <delay_ms>
 384:	08 95       	ret

00000386 <APP_start>:
	Exit_enable1 ();
}
void APP_start(void){
	while(1)
	{
		switch (mode){
 386:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	89 f0       	breq	.+34     	; 0x3b0 <APP_start+0x2a>
 38e:	28 f4       	brcc	.+10     	; 0x39a <APP_start+0x14>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	41 f0       	breq	.+16     	; 0x3a4 <APP_start+0x1e>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	49 f0       	breq	.+18     	; 0x3aa <APP_start+0x24>
 398:	f6 cf       	rjmp	.-20     	; 0x386 <APP_start>
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	61 f0       	breq	.+24     	; 0x3b6 <APP_start+0x30>
 39e:	85 30       	cpi	r24, 0x05	; 5
 3a0:	69 f0       	breq	.+26     	; 0x3bc <APP_start+0x36>
 3a2:	f1 cf       	rjmp	.-30     	; 0x386 <APP_start>
			case 1:
			BLINK_1_mode();
 3a4:	0e 94 9c 00 	call	0x138	; 0x138 <BLINK_1_mode>
			break;
 3a8:	ee cf       	rjmp	.-36     	; 0x386 <APP_start>
			case 2:
			BLINK_2_mode();
 3aa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BLINK_2_mode>
			break;
 3ae:	eb cf       	rjmp	.-42     	; 0x386 <APP_start>
			case 3:
			BLINK_3_mode();
 3b0:	0e 94 12 01 	call	0x224	; 0x224 <BLINK_3_mode>
			break;
 3b4:	e8 cf       	rjmp	.-48     	; 0x386 <APP_start>
			case 4:
			BLINK_4_mode();
 3b6:	0e 94 4d 01 	call	0x29a	; 0x29a <BLINK_4_mode>
			break;
 3ba:	e5 cf       	rjmp	.-54     	; 0x386 <APP_start>
			case 5:
			BLINK_5_mode();
 3bc:	0e 94 88 01 	call	0x310	; 0x310 <BLINK_5_mode>
			break;
 3c0:	e2 cf       	rjmp	.-60     	; 0x386 <APP_start>

000003c2 <Button_init>:

#include "button.h"
 
 // initialize
 void Button_init(uint8_t buttonPort, uint8_t buttonPin) // init button as an input device
 {
 3c2:	98 2f       	mov	r25, r24
 3c4:	86 2f       	mov	r24, r22
	DIO_init(buttonPin, buttonPort, IN);
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	69 2f       	mov	r22, r25
 3ca:	0e 94 02 02 	call	0x404	; 0x404 <DIO_init>
 3ce:	08 95       	ret

000003d0 <LED_init>:




void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 3d0:	98 2f       	mov	r25, r24
 3d2:	86 2f       	mov	r24, r22
	DIO_init(ledPin, ledPort, OUT);	
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	69 2f       	mov	r22, r25
 3d8:	0e 94 02 02 	call	0x404	; 0x404 <DIO_init>
 3dc:	08 95       	ret

000003de <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 3de:	98 2f       	mov	r25, r24
 3e0:	86 2f       	mov	r24, r22
	DIO_write(ledPin, ledPort, HIGH);
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	69 2f       	mov	r22, r25
 3e6:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_write>
 3ea:	08 95       	ret

000003ec <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 3ec:	98 2f       	mov	r25, r24
 3ee:	86 2f       	mov	r24, r22
    DIO_write(ledPin, ledPort, LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	69 2f       	mov	r22, r25
 3f4:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_write>
 3f8:	08 95       	ret

000003fa <main>:

#include "Application/application.h"

int main(void)
{
	APP_init();
 3fa:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	while (1)
	{
		APP_start();
 3fe:	0e 94 c3 01 	call	0x386	; 0x386 <APP_start>
 402:	fd cf       	rjmp	.-6      	; 0x3fe <main+0x4>

00000404 <DIO_init>:
 */
Std_ReturnType DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	Std_ReturnType ret = E_OK;
	
	switch(portNumber)
 404:	62 34       	cpi	r22, 0x42	; 66
 406:	69 f1       	breq	.+90     	; 0x462 <DIO_init+0x5e>
 408:	18 f4       	brcc	.+6      	; 0x410 <DIO_init+0xc>
 40a:	61 34       	cpi	r22, 0x41	; 65
 40c:	41 f0       	breq	.+16     	; 0x41e <DIO_init+0x1a>
 40e:	8d c0       	rjmp	.+282    	; 0x52a <DIO_init+0x126>
 410:	63 34       	cpi	r22, 0x43	; 67
 412:	09 f4       	brne	.+2      	; 0x416 <DIO_init+0x12>
 414:	48 c0       	rjmp	.+144    	; 0x4a6 <DIO_init+0xa2>
 416:	64 34       	cpi	r22, 0x44	; 68
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_init+0x18>
 41a:	66 c0       	rjmp	.+204    	; 0x4e8 <DIO_init+0xe4>
 41c:	86 c0       	rjmp	.+268    	; 0x52a <DIO_init+0x126>
	{
		case PORT_A: 
		if(direction==IN)
 41e:	41 11       	cpse	r20, r1
 420:	0f c0       	rjmp	.+30     	; 0x440 <DIO_init+0x3c>
		{
			DDRA &= ~(1<<pinNumber); // pin init. input
 422:	4a b3       	in	r20, 0x1a	; 26
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_init+0x2c>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_init+0x28>
 434:	cb 01       	movw	r24, r22
 436:	80 95       	com	r24
 438:	84 23       	and	r24, r20
 43a:	8a bb       	out	0x1a, r24	; 26
			ret = E_OK;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret
	    }
		else if(direction==OUT)
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	09 f0       	breq	.+2      	; 0x446 <DIO_init+0x42>
 444:	74 c0       	rjmp	.+232    	; 0x52e <DIO_init+0x12a>
		{
			DDRA |= (1<<pinNumber); // pin init. output
 446:	4a b3       	in	r20, 0x1a	; 26
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_init+0x50>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	8a 95       	dec	r24
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_init+0x4c>
 458:	cb 01       	movw	r24, r22
 45a:	84 2b       	or	r24, r20
 45c:	8a bb       	out	0x1a, r24	; 26
			ret = E_OK;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	08 95       	ret
			ret = E_NOT_OK;
		}
	    break;
	    
		case PORT_B:
		if(direction==IN)
 462:	41 11       	cpse	r20, r1
 464:	0f c0       	rjmp	.+30     	; 0x484 <DIO_init+0x80>
		{
			DDRB &= ~(1<<pinNumber); // pin init. input
 466:	47 b3       	in	r20, 0x17	; 23
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_init+0x70>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_init+0x6c>
 478:	cb 01       	movw	r24, r22
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	87 bb       	out	0x17, r24	; 23
			ret = E_OK;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	08 95       	ret
		}
		else if(direction==OUT)
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	09 f0       	breq	.+2      	; 0x48a <DIO_init+0x86>
 488:	54 c0       	rjmp	.+168    	; 0x532 <DIO_init+0x12e>
		{
			DDRB |= (1<<pinNumber); // pin init. output
 48a:	47 b3       	in	r20, 0x17	; 23
 48c:	21 e0       	ldi	r18, 0x01	; 1
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	b9 01       	movw	r22, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_init+0x94>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	8a 95       	dec	r24
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_init+0x90>
 49c:	cb 01       	movw	r24, r22
 49e:	84 2b       	or	r24, r20
 4a0:	87 bb       	out	0x17, r24	; 23
			ret = E_OK;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret
			ret = E_NOT_OK;
		}
		break;
		
		case PORT_C:
		if(direction==IN)
 4a6:	41 11       	cpse	r20, r1
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <DIO_init+0xc4>
		{
			DDRC &= ~(1<<pinNumber); // pin init. input
 4aa:	44 b3       	in	r20, 0x14	; 20
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_init+0xb4>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_init+0xb0>
 4bc:	cb 01       	movw	r24, r22
 4be:	80 95       	com	r24
 4c0:	84 23       	and	r24, r20
 4c2:	84 bb       	out	0x14, r24	; 20
			ret = E_OK;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
		}
		else if(direction==OUT)
 4c8:	41 30       	cpi	r20, 0x01	; 1
 4ca:	a9 f5       	brne	.+106    	; 0x536 <DIO_init+0x132>
		{
			DDRC |= (1<<pinNumber); // pin init. output
 4cc:	44 b3       	in	r20, 0x14	; 20
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_init+0xd6>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_init+0xd2>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	84 bb       	out	0x14, r24	; 20
			ret = E_OK;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	08 95       	ret
			ret = E_NOT_OK;
		}
		break;
		
		case PORT_D:
		if(direction==IN)
 4e8:	41 11       	cpse	r20, r1
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <DIO_init+0x106>
		{
			DDRD &= ~(1<<pinNumber); // pin init. input
 4ec:	41 b3       	in	r20, 0x11	; 17
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	b9 01       	movw	r22, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_init+0xf6>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	8a 95       	dec	r24
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_init+0xf2>
 4fe:	cb 01       	movw	r24, r22
 500:	80 95       	com	r24
 502:	84 23       	and	r24, r20
 504:	81 bb       	out	0x11, r24	; 17
			ret = E_OK;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret
		}
		else if(direction==OUT)
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	b1 f4       	brne	.+44     	; 0x53a <DIO_init+0x136>
		{
			DDRD |= (1<<pinNumber); // pin init. output
 50e:	41 b3       	in	r20, 0x11	; 17
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_init+0x118>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_init+0x114>
 520:	cb 01       	movw	r24, r22
 522:	84 2b       	or	r24, r20
 524:	81 bb       	out	0x11, r24	; 17
			ret = E_OK;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	08 95       	ret
		{
			ret = E_NOT_OK;
		}
		break;
		default:
		ret = E_NOT_OK;
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
			DDRA |= (1<<pinNumber); // pin init. output
			ret = E_OK;
		}
	    else
		{
			ret = E_NOT_OK;
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
			DDRB |= (1<<pinNumber); // pin init. output
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	08 95       	ret
			DDRC |= (1<<pinNumber); // pin init. output
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	08 95       	ret
			DDRD |= (1<<pinNumber); // pin init. output
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 53a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ret = E_NOT_OK;
	}
	return ret;
	}
 53c:	08 95       	ret

0000053e <DIO_write>:
 */
Std_ReturnType DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	Std_ReturnType ret = E_OK;
	
	switch(portNumber)
 53e:	62 34       	cpi	r22, 0x42	; 66
 540:	69 f1       	breq	.+90     	; 0x59c <DIO_write+0x5e>
 542:	18 f4       	brcc	.+6      	; 0x54a <DIO_write+0xc>
 544:	61 34       	cpi	r22, 0x41	; 65
 546:	41 f0       	breq	.+16     	; 0x558 <DIO_write+0x1a>
 548:	8d c0       	rjmp	.+282    	; 0x664 <DIO_write+0x126>
 54a:	63 34       	cpi	r22, 0x43	; 67
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_write+0x12>
 54e:	48 c0       	rjmp	.+144    	; 0x5e0 <DIO_write+0xa2>
 550:	64 34       	cpi	r22, 0x44	; 68
 552:	09 f4       	brne	.+2      	; 0x556 <DIO_write+0x18>
 554:	66 c0       	rjmp	.+204    	; 0x622 <DIO_write+0xe4>
 556:	86 c0       	rjmp	.+268    	; 0x664 <DIO_write+0x126>
	{
		case PORT_A:
		if(value== LOW)
 558:	41 11       	cpse	r20, r1
 55a:	0f c0       	rjmp	.+30     	; 0x57a <DIO_write+0x3c>
		{
			PORTA &= ~(1<<pinNumber); // write 0
 55c:	4b b3       	in	r20, 0x1b	; 27
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	b9 01       	movw	r22, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_write+0x2c>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_write+0x28>
 56e:	cb 01       	movw	r24, r22
 570:	80 95       	com	r24
 572:	84 23       	and	r24, r20
 574:	8b bb       	out	0x1b, r24	; 27
			ret = E_OK;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	08 95       	ret
		}
		else if(value==HIGH)
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	09 f0       	breq	.+2      	; 0x580 <DIO_write+0x42>
 57e:	74 c0       	rjmp	.+232    	; 0x668 <DIO_write+0x12a>
		{
			PORTA |= (1<<pinNumber); // write 1
 580:	4b b3       	in	r20, 0x1b	; 27
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	b9 01       	movw	r22, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_write+0x50>
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_write+0x4c>
 592:	cb 01       	movw	r24, r22
 594:	84 2b       	or	r24, r20
 596:	8b bb       	out	0x1b, r24	; 27
			ret = E_OK;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret
			ret = E_NOT_OK;
		}
		break;
		
		case PORT_B:
		if(value== LOW)
 59c:	41 11       	cpse	r20, r1
 59e:	0f c0       	rjmp	.+30     	; 0x5be <DIO_write+0x80>
		{
			PORTB &= ~(1<<pinNumber); // write 0
 5a0:	48 b3       	in	r20, 0x18	; 24
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_write+0x70>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	8a 95       	dec	r24
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_write+0x6c>
 5b2:	cb 01       	movw	r24, r22
 5b4:	80 95       	com	r24
 5b6:	84 23       	and	r24, r20
 5b8:	88 bb       	out	0x18, r24	; 24
			ret = E_OK;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	08 95       	ret
		}
		else if(value==HIGH)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <DIO_write+0x86>
 5c2:	54 c0       	rjmp	.+168    	; 0x66c <DIO_write+0x12e>
		{
			PORTB |= (1<<pinNumber); // write 1
 5c4:	48 b3       	in	r20, 0x18	; 24
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_write+0x94>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_write+0x90>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 2b       	or	r24, r20
 5da:	88 bb       	out	0x18, r24	; 24
			ret = E_OK;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	08 95       	ret
			ret = E_NOT_OK;
		}
		break;
		
		case PORT_C:
		if(value== LOW)
 5e0:	41 11       	cpse	r20, r1
 5e2:	0f c0       	rjmp	.+30     	; 0x602 <DIO_write+0xc4>
		{
			PORTC &= ~(1<<pinNumber); // write 0
 5e4:	45 b3       	in	r20, 0x15	; 21
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	b9 01       	movw	r22, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_write+0xb4>
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	8a 95       	dec	r24
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_write+0xb0>
 5f6:	cb 01       	movw	r24, r22
 5f8:	80 95       	com	r24
 5fa:	84 23       	and	r24, r20
 5fc:	85 bb       	out	0x15, r24	; 21
			ret = E_OK;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret
		}
		else if(value==HIGH)
 602:	41 30       	cpi	r20, 0x01	; 1
 604:	a9 f5       	brne	.+106    	; 0x670 <DIO_write+0x132>
		{
			PORTC |= (1<<pinNumber); // write 1
 606:	45 b3       	in	r20, 0x15	; 21
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	b9 01       	movw	r22, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_write+0xd6>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	8a 95       	dec	r24
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_write+0xd2>
 618:	cb 01       	movw	r24, r22
 61a:	84 2b       	or	r24, r20
 61c:	85 bb       	out	0x15, r24	; 21
			ret = E_OK;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret
			ret = E_NOT_OK;
		}
		break;
		
		case PORT_D:
		if(value== LOW)
 622:	41 11       	cpse	r20, r1
 624:	0f c0       	rjmp	.+30     	; 0x644 <DIO_write+0x106>
		{
			PORTD &= ~(1<<pinNumber); // write 0
 626:	42 b3       	in	r20, 0x12	; 18
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	b9 01       	movw	r22, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_write+0xf6>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_write+0xf2>
 638:	cb 01       	movw	r24, r22
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	82 bb       	out	0x12, r24	; 18
			ret = E_OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
		}
		else if(value==HIGH)
 644:	41 30       	cpi	r20, 0x01	; 1
 646:	b1 f4       	brne	.+44     	; 0x674 <DIO_write+0x136>
		{
			PORTD |= (1<<pinNumber); // write 1
 648:	42 b3       	in	r20, 0x12	; 18
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_write+0x118>
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	8a 95       	dec	r24
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_write+0x114>
 65a:	cb 01       	movw	r24, r22
 65c:	84 2b       	or	r24, r20
 65e:	82 bb       	out	0x12, r24	; 18
			ret = E_OK;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	08 95       	ret
		{
			ret = E_NOT_OK;
		}
		break;
		default:
		ret = E_NOT_OK;	
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
			PORTA |= (1<<pinNumber); // write 1
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
			PORTB |= (1<<pinNumber); // write 1
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
			PORTC |= (1<<pinNumber); // write 1
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	08 95       	ret
			PORTD |= (1<<pinNumber); // write 1
			ret = E_OK;
		}
		else
		{
			ret = E_NOT_OK;
 674:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ret = E_NOT_OK;	
	}
	return ret;
	} 
 676:	08 95       	ret

00000678 <Global_interrupt_enable>:
}

// Disable global interrupts
void Global_interrupt_disable (void)
{
	cli();
 678:	78 94       	sei
 67a:	08 95       	ret

0000067c <Exit_enable0>:
}

// enable external interrupt 0
void Exit_enable0 (void)
{
	GICR |= (1<<6);
 67c:	8b b7       	in	r24, 0x3b	; 59
 67e:	80 64       	ori	r24, 0x40	; 64
 680:	8b bf       	out	0x3b, r24	; 59
 682:	08 95       	ret

00000684 <External_interrupt0_mode>:
}

// Choose the external 0 interrupt mode
void External_interrupt0_mode (uint8_t mode)
{
	if (mode==rising_edge)  
 684:	83 30       	cpi	r24, 0x03	; 3
 686:	19 f4       	brne	.+6      	; 0x68e <External_interrupt0_mode+0xa>
	{
		MCUCR |= (1<<0) | (1<<1);
 688:	85 b7       	in	r24, 0x35	; 53
 68a:	83 60       	ori	r24, 0x03	; 3
 68c:	85 bf       	out	0x35, r24	; 53
 68e:	08 95       	ret

00000690 <Exit_enable1>:
}

// enable external interrupt 1
void Exit_enable1 (void)
{
	GICR |= (1<<7);
 690:	8b b7       	in	r24, 0x3b	; 59
 692:	80 68       	ori	r24, 0x80	; 128
 694:	8b bf       	out	0x3b, r24	; 59
 696:	08 95       	ret

00000698 <External_interrupt1_mode>:
}

// Choose the external interrupt 1 mode
void External_interrupt1_mode (uint8_t mode)
{
	if (mode==rising_edge)
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	19 f4       	brne	.+6      	; 0x6a2 <External_interrupt1_mode+0xa>
	{
		MCUCR |= (1<<2) | (1<<3);
 69c:	85 b7       	in	r24, 0x35	; 53
 69e:	8c 60       	ori	r24, 0x0C	; 12
 6a0:	85 bf       	out	0x35, r24	; 53
 6a2:	08 95       	ret

000006a4 <Timer0_init>:
/*Description:
 * Function to set call back function of timer 0 over flow interrupt
 */
void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
	Timer0_OVF_Fptr=LocalFptr;
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <Timer0_init+0x20>
 6a8:	28 f0       	brcs	.+10     	; 0x6b4 <Timer0_init+0x10>
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	99 f0       	breq	.+38     	; 0x6d4 <Timer0_init+0x30>
 6ae:	83 30       	cpi	r24, 0x03	; 3
 6b0:	c9 f0       	breq	.+50     	; 0x6e4 <Timer0_init+0x40>
 6b2:	20 c0       	rjmp	.+64     	; 0x6f4 <Timer0_init+0x50>
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	8f 7b       	andi	r24, 0xBF	; 191
 6b8:	83 bf       	out	0x33, r24	; 51
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	87 7f       	andi	r24, 0xF7	; 247
 6be:	83 bf       	out	0x33, r24	; 51
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <Timer0_init+0x52>
 6c4:	83 b7       	in	r24, 0x33	; 51
 6c6:	80 64       	ori	r24, 0x40	; 64
 6c8:	83 bf       	out	0x33, r24	; 51
 6ca:	83 b7       	in	r24, 0x33	; 51
 6cc:	87 7f       	andi	r24, 0xF7	; 247
 6ce:	83 bf       	out	0x33, r24	; 51
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <Timer0_init+0x52>
 6d4:	83 b7       	in	r24, 0x33	; 51
 6d6:	8f 7b       	andi	r24, 0xBF	; 191
 6d8:	83 bf       	out	0x33, r24	; 51
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	88 60       	ori	r24, 0x08	; 8
 6de:	83 bf       	out	0x33, r24	; 51
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <Timer0_init+0x52>
 6e4:	83 b7       	in	r24, 0x33	; 51
 6e6:	80 64       	ori	r24, 0x40	; 64
 6e8:	83 bf       	out	0x33, r24	; 51
 6ea:	83 b7       	in	r24, 0x33	; 51
 6ec:	88 60       	ori	r24, 0x08	; 8
 6ee:	83 bf       	out	0x33, r24	; 51
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <Timer0_init+0x52>
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	12 be       	out	0x32, r1	; 50
 6f8:	93 b7       	in	r25, 0x33	; 51
 6fa:	98 7f       	andi	r25, 0xF8	; 248
 6fc:	93 bf       	out	0x33, r25	; 51
 6fe:	93 b7       	in	r25, 0x33	; 51
 700:	69 2b       	or	r22, r25
 702:	63 bf       	out	0x33, r22	; 51
 704:	08 95       	ret

00000706 <delay_ms>:
 706:	cf 93       	push	r28
 708:	c8 2f       	mov	r28, r24
 70a:	cc 0f       	add	r28, r28
 70c:	cc 0f       	add	r28, r28
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0e 94 52 03 	call	0x6a4	; 0x6a4 <Timer0_init>
 716:	93 b7       	in	r25, 0x33	; 51
 718:	91 60       	ori	r25, 0x01	; 1
 71a:	93 bf       	out	0x33, r25	; 51
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	07 c0       	rjmp	.+14     	; 0x72e <delay_ms+0x28>
 720:	08 b6       	in	r0, 0x38	; 56
 722:	00 fe       	sbrs	r0, 0
 724:	fd cf       	rjmp	.-6      	; 0x720 <delay_ms+0x1a>
 726:	98 b7       	in	r25, 0x38	; 56
 728:	91 60       	ori	r25, 0x01	; 1
 72a:	98 bf       	out	0x38, r25	; 56
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	2c 17       	cp	r18, r28
 730:	b8 f3       	brcs	.-18     	; 0x720 <delay_ms+0x1a>
 732:	13 be       	out	0x33, r1	; 51
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <__vector_11>:

/*Description:
 * Function of interrupt service routine to implement timer 0 over flow interrupt
 */
ISR(TIMER0_OVF_vect)
{
 738:	1f 92       	push	r1
 73a:	0f 92       	push	r0
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	0f 92       	push	r0
 740:	11 24       	eor	r1, r1
 742:	2f 93       	push	r18
 744:	3f 93       	push	r19
 746:	4f 93       	push	r20
 748:	5f 93       	push	r21
 74a:	6f 93       	push	r22
 74c:	7f 93       	push	r23
 74e:	8f 93       	push	r24
 750:	9f 93       	push	r25
 752:	af 93       	push	r26
 754:	bf 93       	push	r27
 756:	ef 93       	push	r30
 758:	ff 93       	push	r31
	if(Timer0_OVF_Fptr!=NULLPTR)
 75a:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <Timer0_OVF_Fptr>
 75e:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <Timer0_OVF_Fptr+0x1>
 762:	30 97       	sbiw	r30, 0x00	; 0
 764:	09 f0       	breq	.+2      	; 0x768 <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
 766:	09 95       	icall
	}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
