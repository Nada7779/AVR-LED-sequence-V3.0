
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000009d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001606  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b90  00000000  00000000  00002ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  0000390c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4d  00000000  00000000  00003f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  8a:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t mode    = 1;

void APP_init(void)
{
	// LEDs init
	LED_init(led_1_port, led_1_pin);
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 92 02 	call	0x524	; 0x524 <LED_init>
	LED_init(led_2_port, led_2_pin);
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 92 02 	call	0x524	; 0x524 <LED_init>
	LED_init(led_3_port, led_3_pin);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 92 02 	call	0x524	; 0x524 <LED_init>
	LED_init(led_4_port, led_4_pin);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 92 02 	call	0x524	; 0x524 <LED_init>
	// button init
	Button_init(BUTTON_1_PORT, BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	84 e4       	ldi	r24, 0x44	; 68
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 8a 02 	call	0x514	; 0x514 <Button_init>
	Button_init(BUTTON_2_PORT, BUTTON_2_PIN);
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	84 e4       	ldi	r24, 0x44	; 68
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 8a 02 	call	0x514	; 0x514 <Button_init>
	// Enable global interrupts
	Global_interrupt_enable ();
  da:	0e 94 17 04 	call	0x82e	; 0x82e <Global_interrupt_enable>
	// Choose the external interrupt 0 sense - sense in rising edge
	External_interrupt0_mode (rising_edge);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 1f 04 	call	0x83e	; 0x83e <External_interrupt0_mode>
	// Enable External interrupt 0 - INT0
	Exit_enable0 ();
  e6:	0e 94 19 04 	call	0x832	; 0x832 <Exit_enable0>
    // Choose the external interrupt 1 sense - sense in rising edge
    External_interrupt1_mode (rising_edge);
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 2d 04 	call	0x85a	; 0x85a <External_interrupt1_mode>
    // Enable External interrupt 1 - INT1
    Exit_enable1 ();
  f2:	0e 94 27 04 	call	0x84e	; 0x84e <Exit_enable1>
  f6:	08 95       	ret

000000f8 <__vector_1>:
	
	}
}

ISR (EXT_INT_0)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	
	if (sequence < Number_of_sequence)
 106:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 10a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	91 05       	cpc	r25, r1
 112:	30 f4       	brcc	.+12     	; 0x120 <__vector_1+0x28>
	{
		sequence++;
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 11a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 11e:	06 c0       	rjmp	.+12     	; 0x12c <__vector_1+0x34>
	}
	else
	{
		sequence = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 128:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_2>:
ISR (EXT_INT_1)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	
	if (mode < Number_of_modes)
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 150:	85 30       	cpi	r24, 0x05	; 5
 152:	91 05       	cpc	r25, r1
 154:	30 f4       	brcc	.+12     	; 0x162 <__vector_2+0x28>
	{
		mode++;
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	06 c0       	rjmp	.+12     	; 0x16e <__vector_2+0x34>
	}
	else
	{
		mode = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <BLINK_1_mode>:

void BLINK_1_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 17c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 180:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	04 97       	sbiw	r24, 0x04	; 4
 188:	30 f4       	brcc	.+12     	; 0x196 <BLINK_1_mode+0x1a>
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 196:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 19a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 19e:	02 97       	sbiw	r24, 0x02	; 2
 1a0:	04 97       	sbiw	r24, 0x04	; 4
 1a2:	30 f4       	brcc	.+12     	; 0x1b0 <BLINK_1_mode+0x34>
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 1b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1b8:	03 97       	sbiw	r24, 0x03	; 3
 1ba:	04 97       	sbiw	r24, 0x04	; 4
 1bc:	30 f4       	brcc	.+12     	; 0x1ca <BLINK_1_mode+0x4e>
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 1ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1d2:	04 97       	sbiw	r24, 0x04	; 4
 1d4:	04 97       	sbiw	r24, 0x04	; 4
 1d6:	30 f4       	brcc	.+12     	; 0x1e4 <BLINK_1_mode+0x68>
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	delay_ms(100);
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
	LED_off(led_1_port,led_1_pin);
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_2_port,led_2_pin);
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_3_port,led_3_pin);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_4_port,led_4_pin);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	delay_ms(900);
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
 224:	08 95       	ret

00000226 <BLINK_2_mode>:
}
void BLINK_2_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 226:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 22a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	04 97       	sbiw	r24, 0x04	; 4
 232:	30 f4       	brcc	.+12     	; 0x240 <BLINK_2_mode+0x1a>
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 240:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 244:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 248:	02 97       	sbiw	r24, 0x02	; 2
 24a:	04 97       	sbiw	r24, 0x04	; 4
 24c:	30 f4       	brcc	.+12     	; 0x25a <BLINK_2_mode+0x34>
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	81 e4       	ldi	r24, 0x41	; 65
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 25a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 25e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 262:	03 97       	sbiw	r24, 0x03	; 3
 264:	04 97       	sbiw	r24, 0x04	; 4
 266:	30 f4       	brcc	.+12     	; 0x274 <BLINK_2_mode+0x4e>
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 278:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 27c:	04 97       	sbiw	r24, 0x04	; 4
 27e:	04 97       	sbiw	r24, 0x04	; 4
 280:	30 f4       	brcc	.+12     	; 0x28e <BLINK_2_mode+0x68>
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	delay_ms(200);
 28e:	88 ec       	ldi	r24, 0xC8	; 200
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
	LED_off(led_1_port,led_1_pin);
 296:	64 e0       	ldi	r22, 0x04	; 4
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_2_port,led_2_pin);
 2a2:	63 e0       	ldi	r22, 0x03	; 3
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_3_port,led_3_pin);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_4_port,led_4_pin);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	81 e4       	ldi	r24, 0x41	; 65
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	delay_ms(800);
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
 2ce:	08 95       	ret

000002d0 <BLINK_3_mode>:
}
void BLINK_3_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	04 97       	sbiw	r24, 0x04	; 4
 2dc:	30 f4       	brcc	.+12     	; 0x2ea <BLINK_3_mode+0x1a>
 2de:	64 e0       	ldi	r22, 0x04	; 4
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 2ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2ee:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 2f2:	02 97       	sbiw	r24, 0x02	; 2
 2f4:	04 97       	sbiw	r24, 0x04	; 4
 2f6:	30 f4       	brcc	.+12     	; 0x304 <BLINK_3_mode+0x34>
 2f8:	63 e0       	ldi	r22, 0x03	; 3
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 304:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 308:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 30c:	03 97       	sbiw	r24, 0x03	; 3
 30e:	04 97       	sbiw	r24, 0x04	; 4
 310:	30 f4       	brcc	.+12     	; 0x31e <BLINK_3_mode+0x4e>
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	81 e4       	ldi	r24, 0x41	; 65
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 31e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 322:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 326:	04 97       	sbiw	r24, 0x04	; 4
 328:	04 97       	sbiw	r24, 0x04	; 4
 32a:	30 f4       	brcc	.+12     	; 0x338 <BLINK_3_mode+0x68>
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	delay_ms(300);
 338:	8c e2       	ldi	r24, 0x2C	; 44
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
	LED_off(led_1_port,led_1_pin);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_2_port,led_2_pin);
 34c:	63 e0       	ldi	r22, 0x03	; 3
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	81 e4       	ldi	r24, 0x41	; 65
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_3_port,led_3_pin);
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	81 e4       	ldi	r24, 0x41	; 65
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_4_port,led_4_pin);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	81 e4       	ldi	r24, 0x41	; 65
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	delay_ms(700);
 370:	8c eb       	ldi	r24, 0xBC	; 188
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
 378:	08 95       	ret

0000037a <BLINK_4_mode>:
}
void BLINK_4_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 37a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 37e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	04 97       	sbiw	r24, 0x04	; 4
 386:	30 f4       	brcc	.+12     	; 0x394 <BLINK_4_mode+0x1a>
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	81 e4       	ldi	r24, 0x41	; 65
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 394:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 398:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 39c:	02 97       	sbiw	r24, 0x02	; 2
 39e:	04 97       	sbiw	r24, 0x04	; 4
 3a0:	30 f4       	brcc	.+12     	; 0x3ae <BLINK_4_mode+0x34>
 3a2:	63 e0       	ldi	r22, 0x03	; 3
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	81 e4       	ldi	r24, 0x41	; 65
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 3ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3b2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 3b6:	03 97       	sbiw	r24, 0x03	; 3
 3b8:	04 97       	sbiw	r24, 0x04	; 4
 3ba:	30 f4       	brcc	.+12     	; 0x3c8 <BLINK_4_mode+0x4e>
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	81 e4       	ldi	r24, 0x41	; 65
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 3c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 3d0:	04 97       	sbiw	r24, 0x04	; 4
 3d2:	04 97       	sbiw	r24, 0x04	; 4
 3d4:	30 f4       	brcc	.+12     	; 0x3e2 <BLINK_4_mode+0x68>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	delay_ms(500);
 3e2:	84 ef       	ldi	r24, 0xF4	; 244
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
	LED_off(led_1_port,led_1_pin);
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_2_port,led_2_pin);
 3f6:	63 e0       	ldi	r22, 0x03	; 3
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	81 e4       	ldi	r24, 0x41	; 65
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_3_port,led_3_pin);
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	81 e4       	ldi	r24, 0x41	; 65
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_4_port,led_4_pin);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	81 e4       	ldi	r24, 0x41	; 65
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	delay_ms(500);
 41a:	84 ef       	ldi	r24, 0xF4	; 244
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
 422:	08 95       	ret

00000424 <BLINK_5_mode>:
}
void BLINK_5_mode (void)
{
	//ON: 100ms, OFF: 900ms
	if (sequence>0 && sequence<5)LED_on(led_1_port,led_1_pin);
 424:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 428:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	04 97       	sbiw	r24, 0x04	; 4
 430:	30 f4       	brcc	.+12     	; 0x43e <BLINK_5_mode+0x1a>
 432:	64 e0       	ldi	r22, 0x04	; 4
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>1 && sequence<6) LED_on(led_2_port,led_2_pin);
 43e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 442:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 446:	02 97       	sbiw	r24, 0x02	; 2
 448:	04 97       	sbiw	r24, 0x04	; 4
 44a:	30 f4       	brcc	.+12     	; 0x458 <BLINK_5_mode+0x34>
 44c:	63 e0       	ldi	r22, 0x03	; 3
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	81 e4       	ldi	r24, 0x41	; 65
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>2 && sequence<7) LED_on(led_3_port,led_3_pin);
 458:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 45c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 460:	03 97       	sbiw	r24, 0x03	; 3
 462:	04 97       	sbiw	r24, 0x04	; 4
 464:	30 f4       	brcc	.+12     	; 0x472 <BLINK_5_mode+0x4e>
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	81 e4       	ldi	r24, 0x41	; 65
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	if (sequence>3 && sequence<8) LED_on(led_4_port,led_4_pin);
 472:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 476:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 47a:	04 97       	sbiw	r24, 0x04	; 4
 47c:	04 97       	sbiw	r24, 0x04	; 4
 47e:	30 f4       	brcc	.+12     	; 0x48c <BLINK_5_mode+0x68>
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	81 e4       	ldi	r24, 0x41	; 65
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
	delay_ms(800);
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
	LED_off(led_1_port,led_1_pin);
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	81 e4       	ldi	r24, 0x41	; 65
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_2_port,led_2_pin);
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	81 e4       	ldi	r24, 0x41	; 65
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_3_port,led_3_pin);
 4ac:	62 e0       	ldi	r22, 0x02	; 2
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	81 e4       	ldi	r24, 0x41	; 65
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	LED_off(led_4_port,led_4_pin);
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	81 e4       	ldi	r24, 0x41	; 65
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 a2 02 	call	0x544	; 0x544 <LED_off>
	delay_ms(200);
 4c4:	88 ec       	ldi	r24, 0xC8	; 200
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 76 04 	call	0x8ec	; 0x8ec <delay_ms>
 4cc:	08 95       	ret

000004ce <APP_start>:
    Exit_enable1 ();
}
void APP_start(void){
	while(1)
	{
		switch (mode){
 4ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	91 05       	cpc	r25, r1
 4da:	99 f0       	breq	.+38     	; 0x502 <APP_start+0x34>
 4dc:	30 f4       	brcc	.+12     	; 0x4ea <APP_start+0x1c>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	91 05       	cpc	r25, r1
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <APP_start+0x28>
 4e4:	02 97       	sbiw	r24, 0x02	; 2
 4e6:	51 f0       	breq	.+20     	; 0x4fc <APP_start+0x2e>
 4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <APP_start>
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	91 05       	cpc	r25, r1
 4ee:	61 f0       	breq	.+24     	; 0x508 <APP_start+0x3a>
 4f0:	05 97       	sbiw	r24, 0x05	; 5
 4f2:	69 f0       	breq	.+26     	; 0x50e <APP_start+0x40>
 4f4:	ec cf       	rjmp	.-40     	; 0x4ce <APP_start>
			case 1:
			       BLINK_1_mode();
 4f6:	0e 94 be 00 	call	0x17c	; 0x17c <BLINK_1_mode>
				   break;
 4fa:	e9 cf       	rjmp	.-46     	; 0x4ce <APP_start>
			case 2:
			       BLINK_2_mode();
 4fc:	0e 94 13 01 	call	0x226	; 0x226 <BLINK_2_mode>
			       break;
 500:	e6 cf       	rjmp	.-52     	; 0x4ce <APP_start>
			case 3:
			       BLINK_3_mode();
 502:	0e 94 68 01 	call	0x2d0	; 0x2d0 <BLINK_3_mode>
			       break;
 506:	e3 cf       	rjmp	.-58     	; 0x4ce <APP_start>
			case 4:
			       BLINK_4_mode();
 508:	0e 94 bd 01 	call	0x37a	; 0x37a <BLINK_4_mode>
			       break;
 50c:	e0 cf       	rjmp	.-64     	; 0x4ce <APP_start>
			case 5:
			       BLINK_5_mode();
 50e:	0e 94 12 02 	call	0x424	; 0x424 <BLINK_5_mode>
			       break;				   
 512:	dd cf       	rjmp	.-70     	; 0x4ce <APP_start>

00000514 <Button_init>:

#include "button.h"
 
 // initialize
 void Button_init(uint8_t buttonPort, uint8_t buttonPin) // init button as an input device
 {
 514:	9c 01       	movw	r18, r24
 516:	cb 01       	movw	r24, r22
	 DIO_init(buttonPin, buttonPort, IN);
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_init>
 522:	08 95       	ret

00000524 <LED_init>:




void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 524:	9c 01       	movw	r18, r24
 526:	cb 01       	movw	r24, r22
	DIO_init(ledPin, ledPort, OUT);	
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	b9 01       	movw	r22, r18
 52e:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_init>
 532:	08 95       	ret

00000534 <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 534:	9c 01       	movw	r18, r24
 536:	cb 01       	movw	r24, r22
	DIO_write(ledPin, ledPort, HIGH);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <DIO_write>
 542:	08 95       	ret

00000544 <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 544:	9c 01       	movw	r18, r24
 546:	cb 01       	movw	r24, r22
    DIO_write(ledPin, ledPort, LOW);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	b9 01       	movw	r22, r18
 54e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <DIO_write>
 552:	08 95       	ret

00000554 <main>:
#include "Application/application.h"


int main(void)
{
	APP_init();
 554:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	APP_start();
 558:	0e 94 67 02 	call	0x4ce	; 0x4ce <APP_start>
}
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	08 95       	ret

00000562 <DIO_init>:

// function definitions

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
 562:	62 34       	cpi	r22, 0x42	; 66
 564:	71 05       	cpc	r23, r1
 566:	b9 f1       	breq	.+110    	; 0x5d6 <DIO_init+0x74>
 568:	20 f4       	brcc	.+8      	; 0x572 <DIO_init+0x10>
 56a:	61 34       	cpi	r22, 0x41	; 65
 56c:	71 05       	cpc	r23, r1
 56e:	51 f0       	breq	.+20     	; 0x584 <DIO_init+0x22>
 570:	08 95       	ret
 572:	63 34       	cpi	r22, 0x43	; 67
 574:	71 05       	cpc	r23, r1
 576:	09 f4       	brne	.+2      	; 0x57a <DIO_init+0x18>
 578:	57 c0       	rjmp	.+174    	; 0x628 <DIO_init+0xc6>
 57a:	64 34       	cpi	r22, 0x44	; 68
 57c:	71 05       	cpc	r23, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_init+0x20>
 580:	7b c0       	rjmp	.+246    	; 0x678 <DIO_init+0x116>
 582:	08 95       	ret
	{
		case PORT_A: 
		if(direction==IN)
 584:	41 15       	cp	r20, r1
 586:	51 05       	cpc	r21, r1
 588:	91 f4       	brne	.+36     	; 0x5ae <DIO_init+0x4c>
		{
			DDRA &= ~(1<<pinNumber); // pin init. input
 58a:	4a b3       	in	r20, 0x1a	; 26
 58c:	5b b3       	in	r21, 0x1b	; 27
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_init+0x38>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	8a 95       	dec	r24
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_init+0x34>
 59e:	cb 01       	movw	r24, r22
 5a0:	80 95       	com	r24
 5a2:	90 95       	com	r25
 5a4:	84 23       	and	r24, r20
 5a6:	95 23       	and	r25, r21
 5a8:	9b bb       	out	0x1b, r25	; 27
 5aa:	8a bb       	out	0x1a, r24	; 26
 5ac:	08 95       	ret
	    }
		else if(direction==OUT)
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	51 05       	cpc	r21, r1
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <DIO_init+0x54>
 5b4:	88 c0       	rjmp	.+272    	; 0x6c6 <DIO_init+0x164>
		{
			DDRA |= (1<<pinNumber); // pin init. output
 5b6:	2a b3       	in	r18, 0x1a	; 26
 5b8:	3b b3       	in	r19, 0x1b	; 27
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	ba 01       	movw	r22, r20
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_init+0x64>
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_init+0x60>
 5ca:	cb 01       	movw	r24, r22
 5cc:	82 2b       	or	r24, r18
 5ce:	93 2b       	or	r25, r19
 5d0:	9b bb       	out	0x1b, r25	; 27
 5d2:	8a bb       	out	0x1a, r24	; 26
 5d4:	08 95       	ret
			// Error handling
		}
	    break;
	    
		case PORT_B:
		if(direction==IN)
 5d6:	41 15       	cp	r20, r1
 5d8:	51 05       	cpc	r21, r1
 5da:	91 f4       	brne	.+36     	; 0x600 <DIO_init+0x9e>
		{
			DDRB &= ~(1<<pinNumber); // pin init. input
 5dc:	47 b3       	in	r20, 0x17	; 23
 5de:	58 b3       	in	r21, 0x18	; 24
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_init+0x8a>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_init+0x86>
 5f0:	cb 01       	movw	r24, r22
 5f2:	80 95       	com	r24
 5f4:	90 95       	com	r25
 5f6:	84 23       	and	r24, r20
 5f8:	95 23       	and	r25, r21
 5fa:	98 bb       	out	0x18, r25	; 24
 5fc:	87 bb       	out	0x17, r24	; 23
 5fe:	08 95       	ret
		}
		else if(direction==OUT)
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	51 05       	cpc	r21, r1
 604:	09 f0       	breq	.+2      	; 0x608 <DIO_init+0xa6>
 606:	5f c0       	rjmp	.+190    	; 0x6c6 <DIO_init+0x164>
		{
			DDRB |= (1<<pinNumber); // pin init. output
 608:	27 b3       	in	r18, 0x17	; 23
 60a:	38 b3       	in	r19, 0x18	; 24
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	ba 01       	movw	r22, r20
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_init+0xb6>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_init+0xb2>
 61c:	cb 01       	movw	r24, r22
 61e:	82 2b       	or	r24, r18
 620:	93 2b       	or	r25, r19
 622:	98 bb       	out	0x18, r25	; 24
 624:	87 bb       	out	0x17, r24	; 23
 626:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(direction==IN)
 628:	41 15       	cp	r20, r1
 62a:	51 05       	cpc	r21, r1
 62c:	91 f4       	brne	.+36     	; 0x652 <DIO_init+0xf0>
		{
			DDRC &= ~(1<<pinNumber); // pin init. input
 62e:	44 b3       	in	r20, 0x14	; 20
 630:	55 b3       	in	r21, 0x15	; 21
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_init+0xdc>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_init+0xd8>
 642:	cb 01       	movw	r24, r22
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	84 23       	and	r24, r20
 64a:	95 23       	and	r25, r21
 64c:	95 bb       	out	0x15, r25	; 21
 64e:	84 bb       	out	0x14, r24	; 20
 650:	08 95       	ret
		}
		else if(direction==OUT)
 652:	41 30       	cpi	r20, 0x01	; 1
 654:	51 05       	cpc	r21, r1
 656:	b9 f5       	brne	.+110    	; 0x6c6 <DIO_init+0x164>
		{
			DDRC |= (1<<pinNumber); // pin init. output
 658:	24 b3       	in	r18, 0x14	; 20
 65a:	35 b3       	in	r19, 0x15	; 21
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	ba 01       	movw	r22, r20
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_init+0x106>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	8a 95       	dec	r24
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_init+0x102>
 66c:	cb 01       	movw	r24, r22
 66e:	82 2b       	or	r24, r18
 670:	93 2b       	or	r25, r19
 672:	95 bb       	out	0x15, r25	; 21
 674:	84 bb       	out	0x14, r24	; 20
 676:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(direction==IN)
 678:	41 15       	cp	r20, r1
 67a:	51 05       	cpc	r21, r1
 67c:	91 f4       	brne	.+36     	; 0x6a2 <DIO_init+0x140>
		{
			DDRD &= ~(1<<pinNumber); // pin init. input
 67e:	41 b3       	in	r20, 0x11	; 17
 680:	52 b3       	in	r21, 0x12	; 18
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	b9 01       	movw	r22, r18
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_init+0x12c>
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	8a 95       	dec	r24
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_init+0x128>
 692:	cb 01       	movw	r24, r22
 694:	80 95       	com	r24
 696:	90 95       	com	r25
 698:	84 23       	and	r24, r20
 69a:	95 23       	and	r25, r21
 69c:	92 bb       	out	0x12, r25	; 18
 69e:	81 bb       	out	0x11, r24	; 17
 6a0:	08 95       	ret
		}
		else if(direction==OUT)
 6a2:	41 30       	cpi	r20, 0x01	; 1
 6a4:	51 05       	cpc	r21, r1
 6a6:	79 f4       	brne	.+30     	; 0x6c6 <DIO_init+0x164>
		{
			DDRD |= (1<<pinNumber); // pin init. output
 6a8:	21 b3       	in	r18, 0x11	; 17
 6aa:	32 b3       	in	r19, 0x12	; 18
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	ba 01       	movw	r22, r20
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_init+0x156>
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_init+0x152>
 6bc:	cb 01       	movw	r24, r22
 6be:	82 2b       	or	r24, r18
 6c0:	93 2b       	or	r25, r19
 6c2:	92 bb       	out	0x12, r25	; 18
 6c4:	81 bb       	out	0x11, r24	; 17
 6c6:	08 95       	ret

000006c8 <DIO_write>:
	}
	}// Initialize DIO direction

void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
 6c8:	62 34       	cpi	r22, 0x42	; 66
 6ca:	71 05       	cpc	r23, r1
 6cc:	b9 f1       	breq	.+110    	; 0x73c <DIO_write+0x74>
 6ce:	20 f4       	brcc	.+8      	; 0x6d8 <DIO_write+0x10>
 6d0:	61 34       	cpi	r22, 0x41	; 65
 6d2:	71 05       	cpc	r23, r1
 6d4:	51 f0       	breq	.+20     	; 0x6ea <DIO_write+0x22>
 6d6:	08 95       	ret
 6d8:	63 34       	cpi	r22, 0x43	; 67
 6da:	71 05       	cpc	r23, r1
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <DIO_write+0x18>
 6de:	57 c0       	rjmp	.+174    	; 0x78e <DIO_write+0xc6>
 6e0:	64 34       	cpi	r22, 0x44	; 68
 6e2:	71 05       	cpc	r23, r1
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <DIO_write+0x20>
 6e6:	7b c0       	rjmp	.+246    	; 0x7de <DIO_write+0x116>
 6e8:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
 6ea:	41 15       	cp	r20, r1
 6ec:	51 05       	cpc	r21, r1
 6ee:	91 f4       	brne	.+36     	; 0x714 <DIO_write+0x4c>
		{
			PORTA &= ~(1<<pinNumber); // write 0
 6f0:	4b b3       	in	r20, 0x1b	; 27
 6f2:	5c b3       	in	r21, 0x1c	; 28
 6f4:	21 e0       	ldi	r18, 0x01	; 1
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	b9 01       	movw	r22, r18
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_write+0x38>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_write+0x34>
 704:	cb 01       	movw	r24, r22
 706:	80 95       	com	r24
 708:	90 95       	com	r25
 70a:	84 23       	and	r24, r20
 70c:	95 23       	and	r25, r21
 70e:	9c bb       	out	0x1c, r25	; 28
 710:	8b bb       	out	0x1b, r24	; 27
 712:	08 95       	ret
		}
		else if(value==HIGH)
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	51 05       	cpc	r21, r1
 718:	09 f0       	breq	.+2      	; 0x71c <DIO_write+0x54>
 71a:	88 c0       	rjmp	.+272    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{
			PORTA |= (1<<pinNumber); // write 1
 71c:	2b b3       	in	r18, 0x1b	; 27
 71e:	3c b3       	in	r19, 0x1c	; 28
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	ba 01       	movw	r22, r20
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_write+0x64>
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	8a 95       	dec	r24
 72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_write+0x60>
 730:	cb 01       	movw	r24, r22
 732:	82 2b       	or	r24, r18
 734:	93 2b       	or	r25, r19
 736:	9c bb       	out	0x1c, r25	; 28
 738:	8b bb       	out	0x1b, r24	; 27
 73a:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
 73c:	41 15       	cp	r20, r1
 73e:	51 05       	cpc	r21, r1
 740:	91 f4       	brne	.+36     	; 0x766 <DIO_write+0x9e>
		{
			PORTB &= ~(1<<pinNumber); // write 0
 742:	48 b3       	in	r20, 0x18	; 24
 744:	59 b3       	in	r21, 0x19	; 25
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	b9 01       	movw	r22, r18
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_write+0x8a>
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	8a 95       	dec	r24
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_write+0x86>
 756:	cb 01       	movw	r24, r22
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	84 23       	and	r24, r20
 75e:	95 23       	and	r25, r21
 760:	99 bb       	out	0x19, r25	; 25
 762:	88 bb       	out	0x18, r24	; 24
 764:	08 95       	ret
		}
		else if(value==HIGH)
 766:	41 30       	cpi	r20, 0x01	; 1
 768:	51 05       	cpc	r21, r1
 76a:	09 f0       	breq	.+2      	; 0x76e <DIO_write+0xa6>
 76c:	5f c0       	rjmp	.+190    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{
			PORTB |= (1<<pinNumber); // write 1
 76e:	28 b3       	in	r18, 0x18	; 24
 770:	39 b3       	in	r19, 0x19	; 25
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	ba 01       	movw	r22, r20
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_write+0xb6>
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	8a 95       	dec	r24
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_write+0xb2>
 782:	cb 01       	movw	r24, r22
 784:	82 2b       	or	r24, r18
 786:	93 2b       	or	r25, r19
 788:	99 bb       	out	0x19, r25	; 25
 78a:	88 bb       	out	0x18, r24	; 24
 78c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
 78e:	41 15       	cp	r20, r1
 790:	51 05       	cpc	r21, r1
 792:	91 f4       	brne	.+36     	; 0x7b8 <DIO_write+0xf0>
		{
			PORTC &= ~(1<<pinNumber); // write 0
 794:	45 b3       	in	r20, 0x15	; 21
 796:	56 b3       	in	r21, 0x16	; 22
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	b9 01       	movw	r22, r18
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_write+0xdc>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	8a 95       	dec	r24
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_write+0xd8>
 7a8:	cb 01       	movw	r24, r22
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	84 23       	and	r24, r20
 7b0:	95 23       	and	r25, r21
 7b2:	96 bb       	out	0x16, r25	; 22
 7b4:	85 bb       	out	0x15, r24	; 21
 7b6:	08 95       	ret
		}
		else if(value==HIGH)
 7b8:	41 30       	cpi	r20, 0x01	; 1
 7ba:	51 05       	cpc	r21, r1
 7bc:	b9 f5       	brne	.+110    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{
			PORTC |= (1<<pinNumber); // write 1
 7be:	25 b3       	in	r18, 0x15	; 21
 7c0:	36 b3       	in	r19, 0x16	; 22
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	ba 01       	movw	r22, r20
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_write+0x106>
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	8a 95       	dec	r24
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_write+0x102>
 7d2:	cb 01       	movw	r24, r22
 7d4:	82 2b       	or	r24, r18
 7d6:	93 2b       	or	r25, r19
 7d8:	96 bb       	out	0x16, r25	; 22
 7da:	85 bb       	out	0x15, r24	; 21
 7dc:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
 7de:	41 15       	cp	r20, r1
 7e0:	51 05       	cpc	r21, r1
 7e2:	91 f4       	brne	.+36     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		{
			PORTD &= ~(1<<pinNumber); // write 0
 7e4:	42 b3       	in	r20, 0x12	; 18
 7e6:	53 b3       	in	r21, 0x13	; 19
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	b9 01       	movw	r22, r18
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_write+0x12c>
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	8a 95       	dec	r24
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_write+0x128>
 7f8:	cb 01       	movw	r24, r22
 7fa:	80 95       	com	r24
 7fc:	90 95       	com	r25
 7fe:	84 23       	and	r24, r20
 800:	95 23       	and	r25, r21
 802:	93 bb       	out	0x13, r25	; 19
 804:	82 bb       	out	0x12, r24	; 18
 806:	08 95       	ret
		}
		else if(value==HIGH)
 808:	41 30       	cpi	r20, 0x01	; 1
 80a:	51 05       	cpc	r21, r1
 80c:	79 f4       	brne	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{
			PORTD |= (1<<pinNumber); // write 1
 80e:	22 b3       	in	r18, 0x12	; 18
 810:	33 b3       	in	r19, 0x13	; 19
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	ba 01       	movw	r22, r20
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	8a 95       	dec	r24
 820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	cb 01       	movw	r24, r22
 824:	82 2b       	or	r24, r18
 826:	93 2b       	or	r25, r19
 828:	93 bb       	out	0x13, r25	; 19
 82a:	82 bb       	out	0x12, r24	; 18
 82c:	08 95       	ret

0000082e <Global_interrupt_enable>:
}

// Disable global interrupts
void Global_interrupt_disable (void)
{
	cli();
 82e:	78 94       	sei
 830:	08 95       	ret

00000832 <Exit_enable0>:
}

// enable external interrupt 0
void Exit_enable0 (void)
{
	GICR |= (1<<6);
 832:	8b b7       	in	r24, 0x3b	; 59
 834:	9c b7       	in	r25, 0x3c	; 60
 836:	80 64       	ori	r24, 0x40	; 64
 838:	9c bf       	out	0x3c, r25	; 60
 83a:	8b bf       	out	0x3b, r24	; 59
 83c:	08 95       	ret

0000083e <External_interrupt0_mode>:
}

// Choose the external 0 interrupt mode
void External_interrupt0_mode (uint8_t mode)
{
	if (mode==rising_edge)  
 83e:	03 97       	sbiw	r24, 0x03	; 3
 840:	29 f4       	brne	.+10     	; 0x84c <External_interrupt0_mode+0xe>
	{
		MCUCR |= (1<<0) | (1<<1);
 842:	85 b7       	in	r24, 0x35	; 53
 844:	96 b7       	in	r25, 0x36	; 54
 846:	83 60       	ori	r24, 0x03	; 3
 848:	96 bf       	out	0x36, r25	; 54
 84a:	85 bf       	out	0x35, r24	; 53
 84c:	08 95       	ret

0000084e <Exit_enable1>:
}

// enable external interrupt 1
void Exit_enable1 (void)
{
	GICR |= (1<<7);
 84e:	8b b7       	in	r24, 0x3b	; 59
 850:	9c b7       	in	r25, 0x3c	; 60
 852:	80 68       	ori	r24, 0x80	; 128
 854:	9c bf       	out	0x3c, r25	; 60
 856:	8b bf       	out	0x3b, r24	; 59
 858:	08 95       	ret

0000085a <External_interrupt1_mode>:
}

// Choose the external interrupt 1 mode
void External_interrupt1_mode (uint8_t mode)
{
	if (mode==rising_edge)
 85a:	03 97       	sbiw	r24, 0x03	; 3
 85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
	{
		MCUCR |= (1<<2) | (1<<3);
 85e:	85 b7       	in	r24, 0x35	; 53
 860:	96 b7       	in	r25, 0x36	; 54
 862:	8c 60       	ori	r24, 0x0C	; 12
 864:	96 bf       	out	0x36, r25	; 54
 866:	85 bf       	out	0x35, r24	; 53
 868:	08 95       	ret

0000086a <Timer0_init>:
	TIMSK &= ~(1<<TOIE0); // clear bit
}

void Timer0_overflowInterrupt_Enable(void)
{
	TIMSK |= (1<<TOIE0); // set bit
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	89 f0       	breq	.+34     	; 0x890 <Timer0_init+0x26>
 86e:	28 f0       	brcs	.+10     	; 0x87a <Timer0_init+0x10>
 870:	82 30       	cpi	r24, 0x02	; 2
 872:	c9 f0       	breq	.+50     	; 0x8a6 <Timer0_init+0x3c>
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	11 f1       	breq	.+68     	; 0x8bc <Timer0_init+0x52>
 878:	2b c0       	rjmp	.+86     	; 0x8d0 <Timer0_init+0x66>
 87a:	83 b7       	in	r24, 0x33	; 51
 87c:	94 b7       	in	r25, 0x34	; 52
 87e:	8f 7b       	andi	r24, 0xBF	; 191
 880:	94 bf       	out	0x34, r25	; 52
 882:	83 bf       	out	0x33, r24	; 51
 884:	83 b7       	in	r24, 0x33	; 51
 886:	94 b7       	in	r25, 0x34	; 52
 888:	87 7f       	andi	r24, 0xF7	; 247
 88a:	94 bf       	out	0x34, r25	; 52
 88c:	83 bf       	out	0x33, r24	; 51
 88e:	20 c0       	rjmp	.+64     	; 0x8d0 <Timer0_init+0x66>
 890:	83 b7       	in	r24, 0x33	; 51
 892:	94 b7       	in	r25, 0x34	; 52
 894:	80 64       	ori	r24, 0x40	; 64
 896:	94 bf       	out	0x34, r25	; 52
 898:	83 bf       	out	0x33, r24	; 51
 89a:	83 b7       	in	r24, 0x33	; 51
 89c:	94 b7       	in	r25, 0x34	; 52
 89e:	87 7f       	andi	r24, 0xF7	; 247
 8a0:	94 bf       	out	0x34, r25	; 52
 8a2:	83 bf       	out	0x33, r24	; 51
 8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <Timer0_init+0x66>
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	94 b7       	in	r25, 0x34	; 52
 8aa:	8f 7b       	andi	r24, 0xBF	; 191
 8ac:	94 bf       	out	0x34, r25	; 52
 8ae:	83 bf       	out	0x33, r24	; 51
 8b0:	83 b7       	in	r24, 0x33	; 51
 8b2:	94 b7       	in	r25, 0x34	; 52
 8b4:	88 60       	ori	r24, 0x08	; 8
 8b6:	94 bf       	out	0x34, r25	; 52
 8b8:	83 bf       	out	0x33, r24	; 51
 8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <Timer0_init+0x66>
 8bc:	83 b7       	in	r24, 0x33	; 51
 8be:	94 b7       	in	r25, 0x34	; 52
 8c0:	80 64       	ori	r24, 0x40	; 64
 8c2:	94 bf       	out	0x34, r25	; 52
 8c4:	83 bf       	out	0x33, r24	; 51
 8c6:	83 b7       	in	r24, 0x33	; 51
 8c8:	94 b7       	in	r25, 0x34	; 52
 8ca:	88 60       	ori	r24, 0x08	; 8
 8cc:	94 bf       	out	0x34, r25	; 52
 8ce:	83 bf       	out	0x33, r24	; 51
 8d0:	13 be       	out	0x33, r1	; 51
 8d2:	12 be       	out	0x32, r1	; 50
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	94 b7       	in	r25, 0x34	; 52
 8d8:	88 7f       	andi	r24, 0xF8	; 248
 8da:	99 27       	eor	r25, r25
 8dc:	94 bf       	out	0x34, r25	; 52
 8de:	83 bf       	out	0x33, r24	; 51
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	94 b7       	in	r25, 0x34	; 52
 8e4:	86 2b       	or	r24, r22
 8e6:	94 bf       	out	0x34, r25	; 52
 8e8:	83 bf       	out	0x33, r24	; 51
 8ea:	08 95       	ret

000008ec <delay_ms>:
}
void delay_ms(uint8_t delay_time)
{
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	ec 01       	movw	r28, r24
	// timer mode
	Timer0_init(TIMER0_NORMAL_MODE,TIMER0_SCALER_1);
 8f2:	61 e0       	ldi	r22, 0x01	; 1
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	0e 94 35 04 	call	0x86a	; 0x86a <Timer0_init>
	uint8_t overflow=0;
	uint8_t number_of_overflows= 4*delay_time;
 8fa:	ce 01       	movw	r24, r28
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
	// timer start
	TCCR0 |= (1<<0);
 904:	23 b7       	in	r18, 0x33	; 51
 906:	34 b7       	in	r19, 0x34	; 52
 908:	21 60       	ori	r18, 0x01	; 1
 90a:	34 bf       	out	0x34, r19	; 52
 90c:	23 bf       	out	0x33, r18	; 51
}
void delay_ms(uint8_t delay_time)
{
	// timer mode
	Timer0_init(TIMER0_NORMAL_MODE,TIMER0_SCALER_1);
	uint8_t overflow=0;
 90e:	40 e0       	ldi	r20, 0x00	; 0
 910:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t number_of_overflows= 4*delay_time;
	// timer start
	TCCR0 |= (1<<0);
	while(overflow < number_of_overflows)
 912:	0b c0       	rjmp	.+22     	; 0x92a <delay_ms+0x3e>
	{
		// wait until the overflow flag to be set
		while((TIFR & (1<<0))==0) ;
 914:	28 b7       	in	r18, 0x38	; 56
 916:	39 b7       	in	r19, 0x39	; 57
 918:	20 ff       	sbrs	r18, 0
 91a:	fc cf       	rjmp	.-8      	; 0x914 <delay_ms+0x28>
		// CLEAR THE OVERFLOW FLAG
		TIFR |= (1<<0);
 91c:	28 b7       	in	r18, 0x38	; 56
 91e:	39 b7       	in	r19, 0x39	; 57
 920:	21 60       	ori	r18, 0x01	; 1
 922:	39 bf       	out	0x39, r19	; 57
 924:	28 bf       	out	0x38, r18	; 56
		overflow++;
 926:	4f 5f       	subi	r20, 0xFF	; 255
 928:	5f 4f       	sbci	r21, 0xFF	; 255
	Timer0_init(TIMER0_NORMAL_MODE,TIMER0_SCALER_1);
	uint8_t overflow=0;
	uint8_t number_of_overflows= 4*delay_time;
	// timer start
	TCCR0 |= (1<<0);
	while(overflow < number_of_overflows)
 92a:	48 17       	cp	r20, r24
 92c:	59 07       	cpc	r21, r25
 92e:	90 f3       	brcs	.-28     	; 0x914 <delay_ms+0x28>
		// CLEAR THE OVERFLOW FLAG
		TIFR |= (1<<0);
		overflow++;
	}
	// TIMER STOP
	TCCR0= 0x00;
 930:	14 be       	out	0x34, r1	; 52
 932:	13 be       	out	0x33, r1	; 51
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
